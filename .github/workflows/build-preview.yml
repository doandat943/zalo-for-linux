name: Build Zalo for Linux

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      zalo_version:
        description: 'Zalo Version (leave empty for latest)'
        required: false
        default: ''
        type: string
      zadark_version:
        description: 'ZaDark Version/Tag/Commit (leave empty for latest)'
        required: false
        default: ''
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Update ZaDark submodule
      run: |
        git submodule update --remote plugins/zadark

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Cache Electron binaries
      uses: actions/cache@v3
      with:
        path: ~/.cache/electron
        key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-electron-

    - name: Install Node.js dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Get selected Zalo version
      id: get-zalo-version
      run: |
        if [ -n "${{ github.event.inputs.zalo_version }}" ]; then
          echo "Using specified Zalo version: ${{ github.event.inputs.zalo_version }}"
          echo "SELECTED_ZALO_VERSION=${{ github.event.inputs.zalo_version }}" >> $GITHUB_OUTPUT
        else
          LATEST_URL=$(curl -s -I -L -A "Mozilla/5.0" https://zalo.me/download/zalo-pc | grep -i "location:" | tail -1 | cut -d' ' -f2 | tr -d '\r')
          if [[ $LATEST_URL == *.dmg ]]; then
            VERSION=$(echo $LATEST_URL | sed -n 's/.*ZaloSetup-universal-\([0-9.]*\)\.dmg.*/\1/p')
            echo "SELECTED_ZALO_VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Get selected ZaDark version
      id: get-zadark-version
      run: |
        # Check if specific ZaDark version requested
        if [ -n "${{ github.event.inputs.zadark_version }}" ]; then
          echo "Using specified ZaDark version: ${{ github.event.inputs.zadark_version }}"
          cd plugins/zadark
          git checkout ${{ github.event.inputs.zadark_version }}
          ZADARK_VERSION=$(node -p "require('./package.json').version")
          echo "Checked out ZaDark version: $ZADARK_VERSION"
        else
          # ZaDark was updated to latest in previous step, use that version
          ZADARK_VERSION=$(node -p "require('./plugins/zadark/package.json').version")
        fi
        echo "SELECTED_ZADARK_VERSION=$ZADARK_VERSION" >> $GITHUB_OUTPUT

    - name: Get current release versions
      id: get-current-versions
      run: |
        # Get latest release
        RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/latest)
        
        if echo "$RELEASE_INFO" | jq -e '.tag_name' > /dev/null; then
          CURRENT_ZALO_VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          echo "CURRENT_ZALO_VERSION=$CURRENT_ZALO_VERSION" >> $GITHUB_OUTPUT
          
          # Parse ZaDark version from assets
          ASSETS=$(echo "$RELEASE_INFO" | jq -r '.assets[].name')
          ZADARK_ASSET=$(echo "$ASSETS" | grep "+ZaDark-" | head -1)
          if [ -n "$ZADARK_ASSET" ]; then
            CURRENT_ZADARK_VERSION=$(echo "$ZADARK_ASSET" | sed -n 's/.*+ZaDark-\([0-9.]*\).*/\1/p')
            echo "CURRENT_ZADARK_VERSION=$CURRENT_ZADARK_VERSION" >> $GITHUB_OUTPUT
          fi
        else
          echo "No previous release found"
          echo "CURRENT_ZALO_VERSION=" >> $GITHUB_OUTPUT
          echo "CURRENT_ZADARK_VERSION=" >> $GITHUB_OUTPUT
        fi

    - name: Compare selected versions
      id: compare
      run: |
        SELECTED_ZALO="${{ steps.get-zalo-version.outputs.SELECTED_ZALO_VERSION }}"
        SELECTED_ZADARK="${{ steps.get-zadark-version.outputs.SELECTED_ZADARK_VERSION }}"
        CURRENT_ZALO="${{ steps.get-current-versions.outputs.CURRENT_ZALO_VERSION }}"
        CURRENT_ZADARK="${{ steps.get-current-versions.outputs.CURRENT_ZADARK_VERSION }}"
        
        echo "Selected Zalo: $SELECTED_ZALO"
        echo "Selected ZaDark: $SELECTED_ZADARK"
        echo "Current Zalo: $CURRENT_ZALO"
        echo "Current ZaDark: $CURRENT_ZADARK"
        
        # Force build if manual trigger with specific version
        if [ -n "${{ github.event.inputs.zalo_version }}" ] || [ -n "${{ github.event.inputs.zadark_version }}" ]; then
          echo "Manual build requested"
          [ -n "${{ github.event.inputs.zalo_version }}" ] && echo "  Zalo version: ${{ github.event.inputs.zalo_version }}"
          [ -n "${{ github.event.inputs.zadark_version }}" ] && echo "  ZaDark version: ${{ github.event.inputs.zadark_version }}"
          NEED_BUILD=true
        else
          # Auto build only if selected versions changed
          NEED_BUILD=false
          if [ "$SELECTED_ZALO" != "$CURRENT_ZALO" ] || [ "$SELECTED_ZADARK" != "$CURRENT_ZADARK" ]; then
            NEED_BUILD=true
          fi
        fi
        
        echo "NEED_BUILD=$NEED_BUILD" >> $GITHUB_OUTPUT
        echo "ZALO_VERSION=$SELECTED_ZALO" >> $GITHUB_OUTPUT
        echo "ZADARK_VERSION=$SELECTED_ZADARK" >> $GITHUB_OUTPUT

    - name: Setup and build
      if: steps.compare.outputs.NEED_BUILD == 'true'
      env:
        ZALO_VERSION: ${{ github.event.inputs.zalo_version }}
        ZADARK_VERSION: ${{ github.event.inputs.zadark_version }}
      run: |
        npm run setup
        npm run build

    - name: Create release
      if: steps.compare.outputs.NEED_BUILD == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.compare.outputs.ZALO_VERSION }}
        name: ${{ steps.compare.outputs.ZALO_VERSION }}
        files: |
          ./dist/Zalo-${{ steps.compare.outputs.ZALO_VERSION }}-$(date +%Y.%m.%d).AppImage
          ./dist/Zalo-${{ steps.compare.outputs.ZALO_VERSION }}+ZaDark-${{ steps.compare.outputs.ZADARK_VERSION }}-$(date +%Y.%m.%d).AppImage
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}